generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                        String                     @id @default(cuid())
  name                      String?
  email                     String                     @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  role                      String                     @default("OPERATOR")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  accounts                  Account[]
  updatedAssignments        Assignment[]               @relation("UpdatedByUser")
  createdAssignments        Assignment[]               @relation("CreatedByUser")
  assignments               Assignment[]
  sessions                  Session[]
  teamSchedules             TeamSchedule[]
  createdConfigurations     ExcelUploadConfiguration[]
  uploadConfigurationLogs   UploadConfigurationLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Assignment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  author          String?
  dueDate         DateTime
  status          String    @default("PENDING")
  priority        String    @default("NORMAL")
  sourceLocation  String?
  comment         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  assignedToId    String?
  createdById     String
  lastUpdatedById String
  lastUpdatedBy   User      @relation("UpdatedByUser", fields: [lastUpdatedById], references: [id])
  createdBy       User      @relation("CreatedByUser", fields: [createdById], references: [id])
  assignedTo      User?     @relation(fields: [assignedToId], references: [id])

  @@map("assignments")
}

model TeamSchedule {
  id         String   @id @default(cuid())
  date       DateTime
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shiftColor String?
  shiftHours String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
  @@map("team_schedules")
}

model ShiftColorLegend {
  id          String   @id @default(cuid())
  colorCode   String
  colorName   String
  shiftName   String
  startTime   String
  endTime     String
  description String?
  role        String   @default("OPERATOR")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([colorCode, role])
  @@map("shift_color_legends")
}

model ExcelUploadConfiguration {
  id               String   @id @default(cuid())
  name             String
  role             String
  description      String?
  active           Boolean  @default(true)
  
  // Coordinate configuration (stored as JSON)
  dateRow          Int
  dayLabelRow      Int?
  nameColumn       Int
  firstNameRow     Int
  lastNameRow      Int
  firstDateColumn  Int
  lastDateColumn   Int
  dynamicColumns   Boolean  @default(true)
  
  // Processing rules (stored as JSON)
  skipValues       Json     @default("[]")
  validPatterns    Json     @default("[]")
  colorDetection   Boolean  @default(true)
  defaultShift     String?
  
  // Metadata
  createdById      String
  createdBy        User     @relation(fields: [createdById], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([name, role])
  @@map("excel_upload_configurations")
}

model UploadConfigurationLog {
  id              String                   @id @default(cuid())
  configurationId String
  configuration   ExcelUploadConfiguration @relation(fields: [configurationId], references: [id])
  filename        String
  uploadedBy      String
  uploadedByUser  User                     @relation(fields: [uploadedBy], references: [id])
  entriesCount    Int
  successCount    Int
  errorCount      Int
  createdAt       DateTime                 @default(now())

  @@map("upload_configuration_logs")
}
