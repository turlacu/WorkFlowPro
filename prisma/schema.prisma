generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String         @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               String         @default("OPERATOR")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  accounts           Account[]
  updatedAssignments Assignment[]   @relation("UpdatedByUser")
  createdAssignments Assignment[]   @relation("CreatedByUser")
  assignments        Assignment[]
  sessions           Session[]
  teamSchedules      TeamSchedule[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Assignment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  dueDate         DateTime
  status          String    @default("PENDING")
  priority        String    @default("NORMAL")
  sourceLocation  String?
  comment         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  assignedToId    String?
  createdById     String
  lastUpdatedById String
  lastUpdatedBy   User      @relation("UpdatedByUser", fields: [lastUpdatedById], references: [id])
  createdBy       User      @relation("CreatedByUser", fields: [createdById], references: [id])
  assignedTo      User?     @relation(fields: [assignedToId], references: [id])

  @@map("assignments")
}

model TeamSchedule {
  id         String   @id @default(cuid())
  date       DateTime
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shiftColor String?
  shiftHours String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
  @@map("team_schedules")
}

model ShiftColorLegend {
  id          String   @id @default(cuid())
  colorCode   String   @unique
  colorName   String
  shiftName   String
  startTime   String
  endTime     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shift_color_legends")
}
